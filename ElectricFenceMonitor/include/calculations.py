#!/bin/env python3
""" calculations.py
A helper file to calculate values for working with LoRa modules
Most of the functions in this file were adapted from parts of the Arduino LoRa
library from here: https://github.com/sandeepmistry/arduino-LoRa
This file written by Jotham Gates
Created: 22/11/2020
Modified: 25/12/2020
https://github.com/jgOhYeah/PICAXE-Libraries-Extras
"""
from datetime import datetime # To print generated date

# Default configuration. Set ask_every to False to use this instead of asking
# every time.
ask_every = True
freq = 433000000
spread_factor = 9 # Spread factor 6 is not supported.
bandwidth = 125000 # Default 125kHz bandwidth that this library currently cannot change
output_file = "generated.basinc"


def ask_user():
    """ Asks the user to manually type in values """
    global freq
    global spread_factor

    # Frequency
    success = False
    while not success:
        given = input("Enter the frequency (Hz): ")
        try:
            freq = int(given)
        except ValueError:
            print("'{}' is not a valid integer. Please try again".format(given))
        else:
            success = True

    # Spreading Factor
    success = False
    while not success:
        given = input("Enter the spread factor (7 to 12 inclusive): ")
        try:
            spread_factor = int(given)
        except ValueError:
            print("'{}' is not a valid integer. Please try again".format(given))
        else:
            if spread_factor < 7 or spread_factor > 12:
                print("{} is not a valid spreading factor. Please try again".format(spread_factor))
            else:
                success = True


def frequency(freq):
    """ Calculates the bytes for a given frequency """
    freq = (freq << 19) // 32000000

    highest = (freq >> 16) & 0xff
    middle = (freq >> 8) & 0xff
    lowest = (freq >> 0) & 0xff
    return lowest, middle, highest

def ldo(bandwidth, spread_factor):
    """ Calculates the ldo value """
    symbol_duration = 1000 / (bandwidth / (1 << spread_factor))
    return bool(symbol_duration > 16)

if __name__ == "__main__":
    if ask_every:
        ask_user()

    lowest, middle, highest = frequency(freq)
    ldo_flag = int(ldo(bandwidth, spread_factor))
    now = datetime.today().strftime("%Y-%m-%d %H:%M:%S")
    data = "; Autogenerated by calculations.py at {}\n".format(now)
    data += "; For a FREQUENCY of {}MHz, a SPREAD FACTOR of {} and a bandwidth of {}kHz:\n".format(freq / 1000000, spread_factor, bandwidth)
    data += "#DEFINE LORA_FREQ {}\n".format(freq)
    data += "#DEFINE LORA_FREQ_MSB 0x{:02X}\n".format(highest)
    data += "#DEFINE LORA_FREQ_MID 0x{:02X}\n".format(middle)
    data += "#DEFINE LORA_FREQ_LSB 0x{:02X}\n".format(lowest)
    data += "#DEFINE LORA_SPREADING_FACTOR {}\n".format(spread_factor)
    data += "#DEFINE LORA_LDO_ON {}\n\n".format(ldo_flag)
    data += "#DEFINE FILE_GENERATED_INCLUDED ; Prove this file is included properly\n"
    print(data)
    with open(output_file, "w") as output:
        output.write(data)